ALSO:

-> Solches Zeug sollte wohl auch in die BA, also was die Grundlagen sind und wie sie ausgebaut wurden.
-> Vielleicht ins Fazit, dass von diesem fundamentalen schon viel besteht, dass es schwer war, neues zu finden, ohne es zu weit von dem Pattern zu entfernen


FESTSTELLUNG: FRAGMENTS BENUTZT WOHL DEN DIRECTIONINDICATOR UND VERÄNDERT DEN CURSOR, WENN AUF ETWAS GEZEIGT WIRD. GAH.
-> Adaptive Cursor Klasse erstellen, oder so? Gesteuert über Managers? Und dann für Visualisierung halt einfach  DirectionIndicator mit größerer Anpassungsmöglichkeit?


Pointer wird erstmal so übernommen, tatsächliche Erfassung geschieht trotzdem im Manager, über RayCast, wie beim Austronauten.
Pro: 
- Gleiche Struktur wie bei Movement
- Kann Wände berücksichtigen, was nur durch Winkel nicht geht
- Bei vielen Targets evtl. performanter nur einen RayCast zu machen, als Zeug innerhalb von jedem zu machen
- Wenn es auch noch einen Cursor geben soll, bzw. Interaktionsobjekte ohne Pointer, macht das Platzieren innerhalb UiPointer keinen Sinn (Holistik)
	-> Klassenstruktur nochmal überdenken, vielleicht sollte DirectedFocus doch eine eigene Klasse sein oder so (damit andere interaktive Objekte keinen Pointer drin haben etc.) ...
Con: 
- einstellbare Winkel wären nice
- Collider fressen Performance, wären bei Punkt-basiertem nicht nötig


Frage: Wie kann ich Eigenanteil haben?
-> Inspiration von Fragments:
	- Hinter dem Pointer noch ein Symbol/Text, was sich nicht mitdreht
	- Fragments-Stil: Pointer (oder Text?) in der Mitte des Bildschirms, auch wenn Objekt schon zu sehen ist, Pointer selbst wird ausgeblendet wenn, der RayCast trifft, (Text wird grün oder so)
	- Lerpen oder so? Irgendwo stand, dass das besser ist als statisches HUD (müsste früh in der Academy gewesen sein, evtl beim Astronauten)
-> Das schon überlegte: Target löst etwas aus, Pointer und Target verschwinden
-> Evtl. mehrere Targets im Raum, einzelner Pointer zeigt zum nächsten?